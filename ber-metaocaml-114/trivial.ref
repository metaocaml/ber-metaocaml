BER MetaOCaml toplevel, version N 114
OCaml version 4.14.1
Enter #help;; for help.

#       #   - : int = 5
#                     val fact : int -> int = <fun>
#   - : int code = .<1>. 
#   - : string code = .<"aaa">. 
#   #     - : int closed_code = .<1>. 
#       * *   - : 'a list -> 'a list = <fun>
#       - : ('a list -> 'a list) code = .<Stdlib.List.rev>. 
#     Line 3, characters 22-23:
3 | .<fun x -> .~(let y = x in y)>.;;
                          ^
Error: A variable that was bound within brackets is used outside brackets
for example: .<fun x -> .~(foo x)>.
Hint: enclose the variable in brackets,
as in: .<fun x -> .~(foo .<x>.)>.;;
# * * * * * * *   Error was expected
- : unit = ()
#   Line 2, characters 19-20:
2 | .<fun x -> .~(succ x)>.;;   (* From the error message *)
                       ^
Error: A variable that was bound within brackets is used outside brackets
for example: .<fun x -> .~(foo x)>.
Hint: enclose the variable in brackets,
as in: .<fun x -> .~(foo .<x>.)>.;;
# Error was expected
- : unit = ()
#   Line 2, characters 0-9:
2 | .~(.<1>.);;
    ^^^^^^^^^
Error: An escape may appear only within brackets
# * * * *   Error was expected
- : unit = ()
#     Line 3, characters 18-26:
3 | .<fun x -> 1 + .~(.<true>.)>.;;
                      ^^^^^^^^
Error: This expression has type bool but an expression was expected of type
         int
# * * * * * *   Error was expected
- : unit = ()
#       val t : int code = .<1 + 2>. 
# * *   #   val t : int code code = .<.< 1 + 2  >.>. 
# * *   #       * *   val t : int code code = .<.< .~(.< 1 + 2  >.)  >.>. 
#       - : int code = .<1>. 
# * *   - : float code = .<1.>. 
# * *     - : string = "0.666666666667"
# * *   - : float code = .<0.66666666666666663>. 
# * *   - : bool code = .<true>. 
# * *   - : string code = .<"aaa">. 
# * *   - : char code = .<'a'>. 
# * *   - : char list code = .<csp_x_1>. 
# * * * * *   - : unit code = .<()>. 
# * *     val l : 'a -> 'a code = <fun>
#   - : int code = .<Obj.magic 1>. 
# * *   # - : float code = .<Obj.magic 1.>. 
# * *   # - : 'a list code = .<Obj.magic 0>. 
# * *   #   - : (int -> int) code = .<csp_x_2>. 
# * * * * * *     - : ('a list -> 'a list) code = .<Stdlib.List.rev>. 
# * *     - : ('a array -> int -> 'a) code = .<Stdlib.Array.get>. 
# * *   - : (int -> int -> int) code = .<Stdlib.(+)>. 
# * *       - : unit code = .<assert true>. 
# * *   - : unit = ()
#     - : int code = .<Stdlib.succ 1>. 
# * *     #   - : int code = .<1 + 2>. 
# * *   #   - : int code = .<Stdlib.String.length "abc">. 
# * *     #   - : string code = .<Stdlib.StringLabels.sub "abc" ~pos:1 ~len:2>. 
# * *     #   - : string code = .<Stdlib.StringLabels.sub "abc" ~pos:1 ~len:2>. 
# * *     #     - : int code code = .<.< 1  >.>. 
#   - : int code = .<1>. 
#   # - : int code = .<Runcode.run (.< 1  >.)>. 
# * *   # - : int code = .<1 + 2>. 
# * *   - : int code = .<(2 + 4) + (2 + 4)>. 
# * *   #   Line 2, characters 22-31:
2 | .<1 + .~(let x = 2 in .<.<x>.>.)>.;;
                          ^^^^^^^^^
Error: This expression has type 'a code
       but an expression was expected of type int
# * * * * *   Error was expected
- : unit = ()
# - : int code = .<1 + (Runcode.run (.< 2  >.))>. 
# * *   # Line 1, characters 10-41:
1 | run .<1 + .~ (.~(let x = 2 in .<.<x>.>.))>.;;
              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
Error: An escape may appear only within brackets
# * * * * *   Error was expected
- : unit = ()
#   - : int code code = .<.< .~(.< 1  >.)  >.>. 
# * * *   - : int code = .<1>. 
# * *   #   - : int code code = .<.< .~(.< 1  >.)  >.>. 
# * * *   #     - : int code = .<1>. 
# * *   #   - : int code code = .<csp_x_3>. 
# * * * * *   - : int code = .<1>. 
# * *   #   - : int code code = .<.< .~csp_x_6  >.>. 
# * * * * *   #   - : ('a list -> 'a list) code code = .<.< .~(.< Stdlib.List.rev  >.)  >.>. 
# * *   - : ('_weak1 list -> '_weak1 list) code = .<Stdlib.List.rev>. 
# * *   #       * *     * *         * *       * * *     * *       Line 29, characters 51-52:
29 | let t = let f x = .<1 + .~x>. in .<.<fun x -> .~(f x)>.>.;;
                                                        ^
Error: Wrong level: variable bound at level 2 and used at level 1
# * * * * *   Error was expected
- : unit = ()
#   * * * * * *     * * * * * *   val t : (int -> int) code = .<fun x_8_10 -> 1 + x_8_10>. 
#   * *   - : int code code = .<.< assert true; 1  >.>. 
# * *   #   - : int code = .<assert true; 1>. 
# * *   - : int code = .<assert true; 1>. 
# * *   - : int code = .<assert true; 1>. 
# * *     #   - : int code = .<assert true; 1>. 
# * *   #     - : int lazy_t code = .<lazy 1>. 
# * *   #     - : (int * string) code = .<(1, "abc")>. 
# * *   - : (int * string * char) code = .<(1, "abc", 'd')>. 
# * *     #     - : 'a array code = .<[||]>. 
# * *   - : int array code = .<[|(1 + 2);(1 + 2)|]>. 
# * *       - : 'a code = .<Stdlib.raise Stdlib.Not_found>. 
# * *   Line 4, characters 9-21:
4 | .<raise (Scan_failure "")>.;;
             ^^^^^^^^^^^^
Error: This variant expression is expected to have type exn
       There is no constructor Scan_failure within type exn
# * * * * * *   Error was expected
- : unit = ()
# - : 'a code = .<Stdlib.raise (Stdlib.Scanf.Scan_failure "")>. 
# * *   # - : 'a code = .<Stdlib.raise (Stdlib.Scanf.Scan_failure "")>. 
# * *   Exception: Failure "Code execution failed".
# * *   Exception was expected
- : unit = ()
#     - : bool code = .<true>. 
# * *   - : int option code = .<Some 1>. 
# * *   - : int list option code = .<Some [1]>. 
# * *   # - : 'a option code = .<None>. 
# * *   #   - : (int, 'a) Either.t code = .<Stdlib.Either.Left 1>. 
# * *   # - : (int, 'a) t code = .<Stdlib.Either.Left 1>. 
# * *   #   module Foo : sig exception E end
# Line 1, characters 8-13:
1 | .<raise Foo.E>.;;
            ^^^^^
Error: Exception (extension) Foo.E cannot be used within brackets. Put into a separate file.
# * * * * *   Error was expected
- : unit = ()
#   type foo = Bar
# Line 1, characters 2-5:
1 | .<Bar>.;;
      ^^^
Error: Unqualified constructor Bar cannot be used within brackets. Put into a separate file.
# * * * * *   Error was expected
- : unit = ()
#   module Foo : sig type foo = Bar end
# Line 1, characters 2-9:
1 | .<Foo.Bar>.;;
      ^^^^^^^
Error: Constructor Bar cannot be used within brackets. Put into a separate file.
# * * * * *   Error was expected
- : unit = ()
#       - : Complex.t code = .<{ Stdlib.Complex.im = 2.0; Stdlib.Complex.re = 1.0 }>. 
# * *     # - : float code = .<csp_x_11.Stdlib.Complex.re>. 
# * * * * *     - : float code = .<csp_y_12.Stdlib.Complex.re>. 
# * * * * *   # - : int code = .<csp_x_14.Stdlib.contents>. 
# * *   # - : unit code = .<csp_x_16.Stdlib.contents <- 2>. 
# * * * * *   - : int ref = {contents = 2}
#     # - : Complex.t code = .<{ Stdlib.Complex.im = 2.0; Stdlib.Complex.re = 1.0 }>. 
# * *   # - : float code = .<csp_x_18.Stdlib.Complex.re>. 
# * *   #   - : Complex.t code = .<{ csp_x_20 with Stdlib.Complex.re = 2.0 }>. 
# * *   #   #     Line 3, characters 3-35:
3 |    .<{x with re = 3.0; im = 4.0 }>.);;
       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
Warning 23 [useless-record-with]: all the fields are explicitly listed in this record:
the 'with' clause is useless.
Line 3, characters 3-35:
3 |    .<{x with re = 3.0; im = 4.0 }>.);;
       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
Warning 23 [useless-record-with]: all the fields are explicitly listed in this record:
the 'with' clause is useless.
# * * * * * *     type foo = { fool : int; }
# Line 1, characters 3-7:
1 | .<{fool = 1}>.;;
       ^^^^
Error: Unqualified label fool cannot be used within brackets. Put into a separate file.
# * * * * *   Error was expected
- : unit = ()
#       - : int code = .<if true then 1 else 2>. 
#   - : unit code = .<if (Some 1) = None then Stdlib.print_string "weird">. 
# * *   #     - : [> `Foo ] code = .<`Foo>. 
# * *   - : [> `Bar of int ] code = .<`Bar 1>. 
# * *   #     val f : < foo : 'a; .. > -> 'a code = <fun>
# * *   val x : < foo : int > = <obj>
# * *   - : int code = .<csp_x_24#foo>. 
# * *   #     - : float code = .<
Stdlib.Complex.norm { Stdlib.Complex.im = 4.0; Stdlib.Complex.re = 3.0 }>. 
# * *     #   - : float code = .<
Stdlib.Complex.norm { Stdlib.Complex.im = 3.0; Stdlib.Complex.re = 4.0 }>. 
# * *     #       - : unit code = .<
for i_26 = 1 to 5 do
  Stdlib.Printf.printf
    (CamlinternalFormatBasics.Format
       ((CamlinternalFormatBasics.String_literal
           ("ok ",
             (CamlinternalFormatBasics.Int
                (CamlinternalFormatBasics.Int_d,
                  CamlinternalFormatBasics.No_padding,
                  CamlinternalFormatBasics.No_precision,
                  (CamlinternalFormatBasics.Char_literal
                     (' ',
                       (CamlinternalFormatBasics.Int
                          (CamlinternalFormatBasics.Int_d,
                            CamlinternalFormatBasics.No_padding,
                            CamlinternalFormatBasics.No_precision,
                            (CamlinternalFormatBasics.Char_literal
                               ('\n', CamlinternalFormatBasics.End_of_format)))))))))),
         "ok %d %d\n")) i_26 (i_26 + 1)
done>. 
# * * *   ok 1 2
ok 2 3
ok 3 4
ok 4 5
ok 5 6
- : unit = ()
# * * * * * *     - : unit code = .<
for i_28 = 5 downto 1 do
  Stdlib.Printf.printf
    (CamlinternalFormatBasics.Format
       ((CamlinternalFormatBasics.String_literal
           ("ok ",
             (CamlinternalFormatBasics.Int
                (CamlinternalFormatBasics.Int_d,
                  CamlinternalFormatBasics.No_padding,
                  CamlinternalFormatBasics.No_precision,
                  (CamlinternalFormatBasics.Char_literal
                     (' ',
                       (CamlinternalFormatBasics.Int
                          (CamlinternalFormatBasics.Int_d,
                            CamlinternalFormatBasics.No_padding,
                            CamlinternalFormatBasics.No_precision,
                            (CamlinternalFormatBasics.Char_literal
                               ('\n', CamlinternalFormatBasics.End_of_format)))))))))),
         "ok %d %d\n")) i_28 (i_28 + 1)
done>. 
# * * *   ok 5 6
ok 4 5
ok 3 4
ok 2 3
ok 1 2
- : unit = ()
# * * * * * *     - : unit code = .<
for i_30 = 1 to 2 do
  for j_31 = 1 to 3 do
    Stdlib.Printf.printf
      (CamlinternalFormatBasics.Format
         ((CamlinternalFormatBasics.String_literal
             ("ok ",
               (CamlinternalFormatBasics.Int
                  (CamlinternalFormatBasics.Int_d,
                    CamlinternalFormatBasics.No_padding,
                    CamlinternalFormatBasics.No_precision,
                    (CamlinternalFormatBasics.Char_literal
                       (' ',
                         (CamlinternalFormatBasics.Int
                            (CamlinternalFormatBasics.Int_d,
                              CamlinternalFormatBasics.No_padding,
                              CamlinternalFormatBasics.No_precision,
                              (CamlinternalFormatBasics.Char_literal
                                 ('\n',
                                   CamlinternalFormatBasics.End_of_format)))))))))),
           "ok %d %d\n")) i_30 j_31
  done
done>. 
# * * * * *     ok 1 1
ok 1 2
ok 1 3
ok 2 1
ok 2 2
ok 2 3
- : unit = ()
# * * * * * * *       val c : unit code = .<
  for i_34 = 1 to 2 do
    for i_35 = 1 to 3 do
      Stdlib.Printf.printf
        (CamlinternalFormatBasics.Format
           ((CamlinternalFormatBasics.String_literal
               ("ok ",
                 (CamlinternalFormatBasics.Int
                    (CamlinternalFormatBasics.Int_d,
                      CamlinternalFormatBasics.No_padding,
                      CamlinternalFormatBasics.No_precision,
                      (CamlinternalFormatBasics.Char_literal
                         (' ',
                           (CamlinternalFormatBasics.Int
                              (CamlinternalFormatBasics.Int_d,
                                CamlinternalFormatBasics.No_padding,
                                CamlinternalFormatBasics.No_precision,
                                (CamlinternalFormatBasics.Char_literal
                                   ('\n',
                                     CamlinternalFormatBasics.End_of_format)))))))))),
             "ok %d %d\n")) i_35 i_34
    done
  done>. 
# * * * * *   ok 1 1
ok 2 1
ok 3 1
ok 1 2
ok 2 2
ok 3 2
- : unit = ()
# * * * * * * *       - : unit code = .<for _for_36 = 1 to 3 do Stdlib.print_string "ok" done>. 
# * *   okokok- : unit = ()
# * *         - : unit code = .<for i_38 = 1 to 10 do () done>. 
# * *   Exception:
Failure
 "The code built at Line 4, characters 6-7 is not closed: identifier i_39 bound at Line 4, characters 6-7 is free".
# * * * * * * * * * *   Error was expected
- : unit = ()
#     - : unit code = .<for i_41 = 1 to 5 do Stdlib.ignore 0 done>. 
# * *       Exception:
Failure
 "Scope extrusion detected at Line 6, characters 39-54 for code built at Line 5, characters 35-36 for the identifier i_42 bound at Line 5, characters 35-36\nThe problematic code is shown below\n\ni_42".
# * * * *   Error was expected
- : unit = ()
#       Exception:
Failure
 "Scope extrusion detected at Line 4, characters 39-54 for code built at Line 3, characters 55-62 for the identifier i_44 bound at Line 3, characters 35-36\nThe problematic code is shown below\n\ni_44 + 1".
#   * * * * *   Error was expected
- : unit = ()
#     - : ('a -> 'a) code = .<fun x_46 -> x_46>. 
# * *   #   - : (int -> int -> int) code = .<fun x_48 -> fun y_49 -> x_48 + y_49>. 
# * *   #   - : ('a -> int -> int) code = .<fun x_52 -> fun x_53 -> x_53 + x_53>. 
# * *   #     val eta : ('a code -> 'b code) -> ('a -> 'b) code = <fun>
# * *   - : (int -> int) code = .<fun x_56 -> 1 + x_56>. 
# * *   - : (int -> int -> int) code = .<fun x_57 -> fun x_58 -> x_58 + x_57>. 
# * *   #         val fhyg : int code -> int -> int code = <fun>
# * *   - : int code = .<
(fun x_61 -> (fun x_62 -> (fun x_63 -> ((1 + x_61) + x_62) + x_63) 1) 2) 3>. 
# * * *   #     val t : (?x:int -> int -> int) code = .<
  fun ?x:xoptx_67 ->
    let x_69 = match xoptx_67 with | Some xsthx_68 -> xsthx_68 | None -> 0 in
    fun y_70 -> x_69 + y_70>.
  
# * * * * * *   # #         * *   val t : (int -> int) code = .<fun x_71 -> x_71>. 
#   * * * *       * *   val t : int code = .<let f_73 x_72 = x_72 in f_73 1>. 
#       - : (unit -> int) code = .<fun () -> 1>. 
#   - : unit -> int = <fun>
#   #   - : (bool -> int) code = .<function | true -> 1 | false -> 0>. 
# * *   #   - : (bool * 'a list -> int) code = .<fun (true, []) -> 1>. 
# * *   Exception: Match_failure ("//toplevel//", 4, 5).
# * *   Error was expected
- : unit = ()
# #   - : (bool array -> int) code = .<fun [|true;false;false|] -> 1>. 
# * *   #   - : ([> `F of int ] -> bool) code = .<function | `F 1 -> true | _ -> false>. 
# * *   # - : ([> `F of int | `G of int ] -> bool) code = .<
function | `F 1 | `G 2 -> true | _ -> false>. 
# * * *     - : (int * string -> int) code = .<function | (1, "str") -> 1 | (2, _) -> 2>. 
# * *   # # #   #   # # # #   # - : (Complex.t -> int) code = .<
function
| { Stdlib.Complex.re = 1.0 } -> 1
| { Stdlib.Complex.re = 2.0; Stdlib.Complex.im = 2.0 } -> 2
| { Stdlib.Complex.im = _ } -> 3>. 
# * * * * * *       #   #     #         - : (unit -> int) code = .<fun () -> 1>. 
# * *   #       - : ('a -> bool) code = .<fun _ -> true>. 
#   #   - : (int * int -> int) code = .<fun (x_74, y_75) -> x_74 + y_75>. 
# * *   # - : (int option -> int) code = .<
function | Some x_78 as _y_79 -> x_78 | _ -> 2>. 
# * *   # # - : (int list -> int) code = .<
function
| x_84::y_85::z_86::[] -> (x_84 - y_85) + z_86
| x_87::y_88::[] -> x_87 - y_88>. 
# * * * * *   #     - : (int list -> int) code = .<
fun (x_94::y_95::[] | x_94::y_95::_::[]) -> x_94 - y_95>. 
# * * *   # # Exception: Match_failure ("//toplevel//", 1, 5).
#   Error was expected
- : unit = ()
#   - : (int list -> int) code = .<
fun (x_102::y_103::[] | x_102::y_103::_::[] | y_103::x_102::_::_::[]) ->
  x_102 - y_103>.

# * * *   # # #   - : ([< `E of 'a | `F of 'a | `G of 'a ] -> 'a) code = .<
function | `F x_110 | `G x_110 -> x_110 | `E x_111 -> x_111>. 
# * * *   # # Line 1, characters 25-37:
1 | .<function {re=x} -> x | {im=x; re=y} -> x -. y>.;;
                             ^^^^^^^^^^^^
Warning 11 [redundant-case]: this match case is unused.
- : (Complex.t -> float) code = .<
function
| { Stdlib.Complex.re = x_114 } -> x_114
| { Stdlib.Complex.re = y_115; Stdlib.Complex.im = x_116 } -> x_116 -. y_115>.

# * * * * *   - : (Complex.t -> float) code = .<
function
| { Stdlib.Complex.re = x_117; Stdlib.Complex.im = 2.0 } -> x_117
| { Stdlib.Complex.re = y_118; Stdlib.Complex.im = x_119 } -> x_119 -. y_118>.

# * * * * *     #   # - : (int option -> int option) code = .<
function | Some x_126 as y_127 when x_126 > 0 -> y_127 | _ -> None>. 
# * * *     #   #     - : bool code = .<match 1 with | 1 -> true>. 
# * *   #   - : bool code = .<match (1, 2) with | (1, x_132) -> true | x_133 -> false>. 
# * *   - : int code = .<
match [1; 2] with | x_134::[] -> x_134 | x_135::y_136::[] -> x_135 + y_136>. 
# * * *     #     - : int code = .<
match [1; 2] with
| x_140::[] -> x_140
| x_141::y_142::[] | x_141::y_142::_::[] -> x_141 + y_142>. 
# * * * * *   #   - : int code = .<
match [1; 2; 3; 4] with
| x_146::[] -> x_146
| x_147::y_148::[] | x_147::y_148::_::[] | y_148::x_147::_::_::[] ->
    x_147 - y_148>.

# * * * * *     #   - : ([< `E of 'a | `F of 'a | `G of 'a ] -> 'a) code = .<
fun x_152 ->
  match x_152 with | `F x_153 | `G x_153 -> x_153 | `E x_154 -> x_154>.

# * * *     #   # - : (Complex.t -> float) code = .<
fun x_158 ->
  match x_158 with
  | { Stdlib.Complex.re = x_159; Stdlib.Complex.im = 2.0 } -> x_159
  | { Stdlib.Complex.re = y_160; Stdlib.Complex.im = x_161 } ->
      x_161 -. y_160>.

# * * * * * *         #     - : bool code = .<
match Stdlib.List.mem 1 [] with
| x_166 -> x_166
| exception Stdlib.Not_found -> false>. 
# * * *               * * * * * * * *       val f : ((int * string) list -> string) code = .<
  fun x_168 ->
    match Stdlib.List.assoc 1 x_168 with
    | "1" as x_169 -> x_169
    | x_170 -> x_170
    | exception Stdlib.Not_found -> ""
    | exception Stdlib.Invalid_argument x_171 -> x_171>.
  
#     - : (int -> bool option) code = .<
fun x_172 ->
  try Some (Stdlib.List.assoc x_172 [(1, true); (2, false)])
  with | Stdlib.Not_found -> None>.

# * * * * *     #   #   #   - : (string -> string) code = .<
fun x_176 ->
  try
    Stdlib.Scanf.sscanf x_176
      (CamlinternalFormatBasics.Format
         ((CamlinternalFormatBasics.Int
             (CamlinternalFormatBasics.Int_d,
               CamlinternalFormatBasics.No_padding,
               CamlinternalFormatBasics.No_precision,
               CamlinternalFormatBasics.End_of_format)), "%d"))
      (fun x_177 -> Stdlib.string_of_int x_177)
  with | Stdlib.Scanf.Scan_failure x_178 -> "fail " ^ x_178>.

# * * * * * *       #   #       - : int code = .<let x_185 = 1 in x_185>. 
# * *     # - : int code = .<let x_187 = 1 in let x_188 = x_187 + 1 in x_188>. 
# * *     # - : int code = .<
let rec f_191 n_192 = if n_192 = 0 then 1 else n_192 * (f_191 (n_192 - 1)) in
f_191 5>. 
# * * *     #       Line 3, characters 6-7:
3 | .<let f = fun x -> x in 
          ^
Warning 26 [unused-var]: unused variable f.
- : int code = .<
let f_196 x_195 = x_195 in
let rec f_197 n_198 = if n_198 = 0 then 1 else n_198 * (f_197 (n_198 - 1)) in
f_197 5>. 
# * * * * * * * * *       Line 12, characters 20-21:
12 | let 120 = run .<let f = fun x -> x in 
                         ^
Warning 26 [unused-var]: unused variable f.
#     - : int code = .<
let f_204 x_203 = x_203 in
let f_206 n_205 = if n_205 = 0 then 1 else n_205 * (f_204 (n_205 - 1)) in
f_206 5>. 
# * * * *     #       - : (int * int) code = .<
let g_212 x_211 = x_211 + 10 in
let f_213 x_216 = (g_212 x_216) + 20
and g_214 n_215 = if n_215 = 0 then 1 else n_215 * (g_212 (n_215 - 1)) in
((f_213 5), (g_214 5))>. 
#   * * * * * *       #       Line 2, characters 6-7:
2 | .<let g = fun x -> x+10 in
          ^
Warning 26 [unused-var]: unused variable g.
- : (int * int) code = .<
let g_224 x_223 = x_223 + 10 in
let rec f_225 x_228 = (g_226 x_228) + 20
and g_226 n_227 = if n_227 = 0 then 1 else n_227 * (g_226 (n_227 - 1)) in
((f_225 5), (g_226 5))>. 
#   * * * * * * * * * *           Line 15, characters 11-12:
15 |  run .<let g = fun x -> x+10 in
                ^
Warning 26 [unused-var]: unused variable g.
#   Line 2, characters 10-12:
2 | .<let rec [] = [] in []>.;;
              ^^
Error: Only variables are allowed as left-hand side of `let rec'
# * * * * *   Error was expected
- : unit = ()
#   Line 2, characters 14-15:
2 | .<let rec f = f in f>.;;
                  ^
Error: This kind of expression is not allowed as right-hand side of `let rec'
# * * * * *   Error was expected
- : unit = ()
#       - : (int -> bool) code = .<
fun x_235 ->
  let rec even_236 = function | 0 -> true | x_239 -> odd_237 (x_239 - 1)
  and odd_237 = function | 0 -> false | x_238 -> even_236 (x_238 - 1) in
  even_236 x_235>.

# * * * * * *   # #       - : int code = .<let x_250 = 1
                 and y_251 = 2 in x_250 + y_251>. 
# * *   #   - : int code = .<
let x_254 = 1 in let x_255 = x_254 + 1
                 and y_256 = x_254 + 1 in x_255 + y_256>.

# * * *   # - : (int option -> int) code = .<
fun x_260 -> match x_260 with | Some x_261 -> x_261 + 1>. 
# * * *   # Exception: Match_failure ("//toplevel//", 1, 16).
# * *   Error was expected
- : unit = ()
#         - : int code = .<1>. 
#   - : int code = .<x_267>.

Failure("The code built at Line 2, characters 35-36 is not closed: identifier x_267 bound at Line 2, characters 35-36 is free")
# * * * *   Error was expected
- : unit = ()
#   Exception:
Failure
 "The code built at Line 2, characters 43-44 is not closed: identifier x_268 bound at Line 2, characters 43-44 is free".
# * * * *   Error was expected
- : unit = ()
#   - : ('_weak2 -> '_weak2) code = .<fun y_271 -> x_270>.

Failure("The code built at Line 2, characters 55-69 is not closed: identifier x_270 bound at Line 2, characters 42-43 is free")
# * * * *   Error was expected
- : unit = ()
#       Exception:
Failure
 "Scope extrusion detected at Line 4, characters 67-75 for code built at Line 4, characters 28-42 for the identifier x_273 bound at Line 4, characters 15-16\nThe problematic code is shown below\n\nfun y_274 -> x_273".
# * * * *   Error was expected
- : unit = ()
#   * *   - : ('_weak3 -> '_weak3) code = .<fun y_278 -> y_278>. 
# * *         - : ('_weak4 -> '_weak5 -> '_weak5) code = .<
fun x_280 -> fun y_281 -> y_281>. 
# * *   - : ('_weak6 -> '_weak6 -> '_weak6) code = .<
fun x_283 -> fun y_284 -> x_283>. 
# * *     #       * *     * * *         * * * * * * * * *       Line 7, characters 36-42:
7 | let t = .<fun x -> (x+1)[@ppwarning "todo"]>.
                                        ^^^^^^
Warning 22 [preprocessor]: todo
Line 13, characters 40-47:
13 | let t = .<let f x = x [@@inline] in (f[@inlined]) ()>.
                                             ^^^^^^^
Warning 53 [misplaced-attribute]: the "inlined" attribute cannot appear in this context

All done

val t : unit code = .<let f_291 x_290 = x_290 in f_291 ()>. 
# 
