BER MetaOCaml toplevel, version N 111
        OCaml version 4.11.1

#   #   - : int = 5
#   val fact : int -> int = <fun>
#   #   - : int code = .<1>. 
#   - : string code = .<"aaa">. 
#   Line 2, characters 8-10:
2 | let 1 = !. .<1>.;;
            ^^
Alert deprecated: Runcode.!.
use run
#     - : int closed_code = .<1>. 
#       * *   - : 'a list -> 'a list = <fun>
#       - : ('a list -> 'a list) code = .<Stdlib.List.rev>. 
#     Line 3, characters 22-23:
3 | .<fun x -> .~(let y = x in y)>.;;
                          ^
Error: A variable that was bound within brackets is used outside brackets
for example: .<fun x -> .~(foo x)>.
Hint: enclose the variable in brackets,
as in: .<fun x -> .~(foo .<x>.)>.;;
# * * * * * * *   Error was expected
- : unit = ()
#   Line 2, characters 19-20:
2 | .<fun x -> .~(succ x)>.;;   (* From the error message *)
                       ^
Error: A variable that was bound within brackets is used outside brackets
for example: .<fun x -> .~(foo x)>.
Hint: enclose the variable in brackets,
as in: .<fun x -> .~(foo .<x>.)>.;;
# Error was expected
- : unit = ()
#   Line 2, characters 0-9:
2 | .~(.<1>.);;
    ^^^^^^^^^
Error: An escape may appear only within brackets
# * * * *   Error was expected
- : unit = ()
#     Line 3, characters 15-27:
3 | .<fun x -> 1 + .~(.<true>.)>.;;
                   ^^^^^^^^^^^^
Error: This expression has type bool but an expression was expected of type
         int
# * * * * * *   Error was expected
- : unit = ()
#       val t : int code = .<1 + 2>. 
# * *   #   val t : int code code = .<.< 1 + 2  >.>. 
# * *   #       val t : int code code = .<.< 1 + 2  >.>. 
# * *   #       - : int code = .<1>. 
# * *   - : float code = .<1.>. 
# * *   - : bool code = .<true>. 
# * *   - : string code = .<"aaa">. 
# * *   - : char code = .<'a'>. 
# * *   - : char list code = .<(* CSP x *)>. 
# * *   - : unit code = .<()>. 
# * *     val l : 'a -> 'a code = <fun>
#   - : int code = .<(* CSP x *) (Obj.magic 1)>. 
# * *   # - : float code = .<(* CSP x *)>. 
# * *   # - : 'a list code = .<(* CSP x *) (Obj.magic 0)>. 
# * *   #   Line 5, characters 12-13:
Warning 22: The CSP value is a closure or too deep to serialize
- : (int -> int) code = .<(* CSP x *)>. 
# * * * * * *     - : ('a list -> 'a list) code = .<Stdlib.List.rev>. 
# * *     - : ('a array -> int -> 'a) code = .<Stdlib.Array.get>. 
# * *   - : (int -> int -> int) code = .<Stdlib.(+)>. 
# * *       - : unit code = .<assert true>. 
# * *   - : unit = ()
#     - : int code = .<Stdlib.succ 1>. 
# * *     #   - : int code = .<1 + 2>. 
# * *   #   - : int code = .<Stdlib.String.length "abc">. 
# * *     #   - : string code = .<Stdlib.StringLabels.sub "abc" ~pos:1 ~len:2>. 
# * *     #   - : string code = .<Stdlib.StringLabels.sub "abc" ~pos:1 ~len:2>. 
# * *     #     - : int code code = .<.< 1  >.>. 
#   - : int code = .<1>. 
#   #   - : int code = .<Runcode.run .< 1  >.>. 
# * *   # - : int code = .<1 + 2>. 
# * *   - : int code = .<(2 + 4) + (2 + 4)>. 
# * *   #   Line 2, characters 22-31:
2 | .<1 + .~(let x = 2 in .<.<x>.>.)>.;;
                          ^^^^^^^^^
Error: This expression has type 'a code
       but an expression was expected of type int
# * * * * *   Error was expected
- : unit = ()
# - : int code = .<1 + (Runcode.run .< 2  >.)>. 
# * *   # Line 1, characters 10-41:
1 | run .<1 + .~ (.~(let x = 2 in .<.<x>.>.))>.;;
              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
Error: An escape may appear only within brackets
# * * * * *   Error was expected
- : unit = ()
#   - : int code code = .<.< .~(.< 1  >.)  >.>. 
# * * *   - : int code = .<1>. 
# * *   #   - : int code code = .<.< .~(.< 1  >.)  >.>. 
# * * *   #     - : int code = .<1>. 
# * *   #   - : int code code = .<(* CSP x *)>. 
# * *   - : int code = .<1>. 
# * *   #   - : int code code = .<.< .~((* CSP x *))  >.>. 
# * *   #   - : ('a list -> 'a list) code code = .<.< .~(.< Stdlib.List.rev  >.)  >.>. 
# * *   - : ('_weak1 list -> '_weak1 list) code = .<Stdlib.List.rev>. 
# * *   #   * *   - : int code code = .<.< assert true; 1  >.>. 
# * *   #   - : int code = .<assert true; 1>. 
# * *   - : int code = .<assert true; 1>. 
# * *   - : int code = .<assert true; 1>. 
# * *     #   - : int code = .<assert true; 1>. 
# * *         - : int lazy_t code = .<lazy 1>. 
# * *   #     - : (int * string) code = .<(1, "abc")>. 
# * *   - : (int * string * char) code = .<(1, "abc", 'd')>. 
# * *     #     - : 'a array code = .<[||]>. 
# * *   - : int array code = .<[|(1 + 2);(1 + 2)|]>. 
# * *       - : 'a code = .<Stdlib.raise Stdlib.Not_found>. 
# * *   Line 4, characters 9-21:
4 | .<raise (Scan_failure "")>.;;
             ^^^^^^^^^^^^
Error: This variant expression is expected to have type exn
       The constructor Scan_failure does not belong to type exn
# * * * * * *   Error was expected
- : unit = ()
# - : 'a code = .<Stdlib.raise (Stdlib.Scanf.Scan_failure "")>. 
# * *   # - : 'a code = .<Stdlib.raise (Stdlib.Scanf.Scan_failure "")>. 
# * *   Exception: Stdlib.Scanf.Scan_failure "".
# * *   Exception was expected
- : unit = ()
#     - : bool code = .<true>. 
# * *   - : int option code = .<Some 1>. 
# * *   - : int list option code = .<Some [1]>. 
# * *   # - : 'a option code = .<None>. 
# * *   #   - : Genlex.token code = .<Stdlib.Genlex.Int 1>. 
# * *   # - : token code = .<Stdlib.Genlex.Int 1>. 
# * *   #   module Foo : sig exception E end
# Line 1, characters 8-13:
1 | .<raise Foo.E>.;;
            ^^^^^
Error: Exception (extension) Foo.E cannot be used within brackets. Put into a separate file.
# * * * * *   Error was expected
- : unit = ()
#   type foo = Bar
# Line 1, characters 2-5:
1 | .<Bar>.;;
      ^^^
Error: Unqualified constructor Bar cannot be used within brackets. Put into a separate file.
# * * * * *   Error was expected
- : unit = ()
#   module Foo : sig type foo = Bar end
# Line 1, characters 2-9:
1 | .<Foo.Bar>.;;
      ^^^^^^^
Error: Constructor Bar cannot be used within brackets. Put into a separate file.
# * * * * *   Error was expected
- : unit = ()
#       - : Complex.t code = .<{ Stdlib.Complex.im = 2.0; Stdlib.Complex.re = 1.0 }>. 
# * *     # - : float code = .<(* CSP x *).Stdlib.Complex.re>. 
# * * * * * * * *     - : float code = .<(* CSP x *).Stdlib.Complex.re>. 
# * *   # - : int code = .<(* CSP x *).Stdlib.contents>. 
# * *   # - : unit code = .<(* CSP x *).Stdlib.contents <- 2>. 
# * *   - : int ref = {contents = 2}
#     # - : t code = .<{ Stdlib.Complex.im = 2.0; Stdlib.Complex.re = 1.0 }>. 
# * *   # - : float code = .<(* CSP x *).Stdlib.Complex.re>. 
# * *   #   - : t code = .<{ (* CSP x *) with Stdlib.Complex.re = 2.0 }>. 
# * *   #   #     Line 3, characters 3-35:
3 |    .<{x with re = 3.0; im = 4.0 }>.);;
       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
Warning 23: all the fields are explicitly listed in this record:
the 'with' clause is useless.
# * * * * * *     type foo = { fool : int; }
# Line 1, characters 3-7:
1 | .<{fool = 1}>.;;
       ^^^^
Error: Unqualified label fool cannot be used within brackets. Put into a separate file.
# * * * * *   Error was expected
- : unit = ()
#       - : int code = .<if true then 1 else 2>. 
#   - : unit code = .<if (Some 1) = None then Stdlib.print_string "weird">. 
# * *   #     - : [> `Foo ] code = .<`Foo>. 
# * *   - : [> `Bar of int ] code = .<`Bar 1>. 
# * *   #     val f : < foo : 'a; .. > -> 'a code = <fun>
# * *   val x : < foo : int > = <obj>
# * *   Line 3, characters 19-20:
 | 
 | ..
 | .....
Warning 22: The CSP value is a closure or too deep to serialize
- : int code = .<(* CSP x *)#foo>. 
# * *   Line 3, characters 19-20:
1 | ......
2 | ..
3 | .........u.........
Warning 22: The CSP value is a closure or too deep to serialize
#     - : float code = .<
Stdlib.Complex.norm { Stdlib.Complex.im = 4.0; Stdlib.Complex.re = 3.0 }>. 
# * *     #   - : float code = .<
Stdlib.Complex.norm { Stdlib.Complex.im = 3.0; Stdlib.Complex.re = 4.0 }>. 
# * *     #       - : unit code = .<
for i_1 = 1 to 5 do
  Stdlib.Printf.printf
    (CamlinternalFormatBasics.Format
       ((CamlinternalFormatBasics.String_literal
           ("ok ",
             (CamlinternalFormatBasics.Int
                (CamlinternalFormatBasics.Int_d,
                  CamlinternalFormatBasics.No_padding,
                  CamlinternalFormatBasics.No_precision,
                  (CamlinternalFormatBasics.Char_literal
                     (' ',
                       (CamlinternalFormatBasics.Int
                          (CamlinternalFormatBasics.Int_d,
                            CamlinternalFormatBasics.No_padding,
                            CamlinternalFormatBasics.No_precision,
                            (CamlinternalFormatBasics.Char_literal
                               ('\n', CamlinternalFormatBasics.End_of_format)))))))))),
         "ok %d %d\n")) i_1 (i_1 + 1)
done>. 
# * * *   ok 1 2
ok 2 3
ok 3 4
ok 4 5
ok 5 6
- : unit = ()
# * * * * * *     - : unit code = .<
for i_3 = 5 downto 1 do
  Stdlib.Printf.printf
    (CamlinternalFormatBasics.Format
       ((CamlinternalFormatBasics.String_literal
           ("ok ",
             (CamlinternalFormatBasics.Int
                (CamlinternalFormatBasics.Int_d,
                  CamlinternalFormatBasics.No_padding,
                  CamlinternalFormatBasics.No_precision,
                  (CamlinternalFormatBasics.Char_literal
                     (' ',
                       (CamlinternalFormatBasics.Int
                          (CamlinternalFormatBasics.Int_d,
                            CamlinternalFormatBasics.No_padding,
                            CamlinternalFormatBasics.No_precision,
                            (CamlinternalFormatBasics.Char_literal
                               ('\n', CamlinternalFormatBasics.End_of_format)))))))))),
         "ok %d %d\n")) i_3 (i_3 + 1)
done>. 
# * * *   ok 5 6
ok 4 5
ok 3 4
ok 2 3
ok 1 2
- : unit = ()
# * * * * * *     - : unit code = .<
for i_5 = 1 to 2 do
  for j_6 = 1 to 3 do
    Stdlib.Printf.printf
      (CamlinternalFormatBasics.Format
         ((CamlinternalFormatBasics.String_literal
             ("ok ",
               (CamlinternalFormatBasics.Int
                  (CamlinternalFormatBasics.Int_d,
                    CamlinternalFormatBasics.No_padding,
                    CamlinternalFormatBasics.No_precision,
                    (CamlinternalFormatBasics.Char_literal
                       (' ',
                         (CamlinternalFormatBasics.Int
                            (CamlinternalFormatBasics.Int_d,
                              CamlinternalFormatBasics.No_padding,
                              CamlinternalFormatBasics.No_precision,
                              (CamlinternalFormatBasics.Char_literal
                                 ('\n',
                                   CamlinternalFormatBasics.End_of_format)))))))))),
           "ok %d %d\n")) i_5 j_6
  done
done>. 
# * * * * *     ok 1 1
ok 1 2
ok 1 3
ok 2 1
ok 2 2
ok 2 3
- : unit = ()
# * * * * * * *       val c : unit code = .<
  for i_9 = 1 to 2 do
    for i_10 = 1 to 3 do
      Stdlib.Printf.printf
        (CamlinternalFormatBasics.Format
           ((CamlinternalFormatBasics.String_literal
               ("ok ",
                 (CamlinternalFormatBasics.Int
                    (CamlinternalFormatBasics.Int_d,
                      CamlinternalFormatBasics.No_padding,
                      CamlinternalFormatBasics.No_precision,
                      (CamlinternalFormatBasics.Char_literal
                         (' ',
                           (CamlinternalFormatBasics.Int
                              (CamlinternalFormatBasics.Int_d,
                                CamlinternalFormatBasics.No_padding,
                                CamlinternalFormatBasics.No_precision,
                                (CamlinternalFormatBasics.Char_literal
                                   ('\n',
                                     CamlinternalFormatBasics.End_of_format)))))))))),
             "ok %d %d\n")) i_10 i_9
    done
  done>. 
# * * * * *   ok 1 1
ok 2 1
ok 3 1
ok 1 2
ok 2 2
ok 3 2
- : unit = ()
# * * * * * * *       - : unit code = .<for _for_11 = 1 to 3 do Stdlib.print_string "ok" done>. 
# * *   okokok- : unit = ()
# * *         - : unit code = .<for i_13 = 1 to 10 do () done>. 
# * *   Exception:
Failure
 "The code built at Line 4, characters 6-7 is not closed: identifier i_14 bound at Line 4, characters 6-7 is free".
# * * * * * * * * * *   Error was expected
- : unit = ()
#     Line 2, characters 21-68:
2 | let r = ref .<0>. in .<for i=1 to 5 do .~(r := .<0>.; .<()>.) done>.; 
                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
Warning 10: this expression should have type unit.
- : unit code = .<for i_16 = 1 to 5 do Stdlib.ignore 0 done>. 
# * *       Line 5, characters 21-68:
5 | let r = ref .<0>. in .<for i=1 to 5 do .~(r := .<i>.; .<()>.) done>.; 
                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
Warning 10: this expression should have type unit.
Exception:
Failure
 "Scope extrusion detected at Line 6, characters 39-54 for code built at Line 5, characters 27-28 for the identifier i_17 bound at Line 5, characters 27-28\nThe problematic code is shown below\n\ni_17".
# * * * *   Error was expected
- : unit = ()
#       Line 3, characters 21-70:
3 | let r = ref .<0>. in .<for i=1 to 5 do .~(r := .<i+1>.; .<()>.) done>.; 
                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
Warning 10: this expression should have type unit.
Exception:
Failure
 "Scope extrusion detected at Line 4, characters 39-54 for code built at Line 3, characters 47-54 for the identifier i_19 bound at Line 3, characters 27-28\nThe problematic code is shown below\n\ni_19 + 1".
#   * * * * * * * *   Error was expected
- : unit = ()
#     - : ('a -> 'a) code = .<fun x_21 -> x_21>. 
# * *   #   - : (int -> int -> int) code = .<fun x_23 -> fun y_24 -> x_23 + y_24>. 
# * *   #   - : ('a -> int -> int) code = .<fun x_27 -> fun x_28 -> x_28 + x_28>. 
# * *   #     val eta : ('a code -> 'b code) -> ('a -> 'b) code = <fun>
# * *   - : (int -> int) code = .<fun x_31 -> 1 + x_31>. 
# * *   - : (int -> int -> int) code = .<fun x_32 -> fun x_33 -> x_33 + x_32>. 
# * *   #         val fhyg : int code -> int -> int code = <fun>
# * *   - : int code = .<
(fun x_36 -> (fun x_37 -> (fun x_38 -> ((1 + x_36) + x_37) + x_38) 1) 2) 3>. 
# * * *   #     val t : (?x:int -> int -> int) code = .<
  fun ?x:xoptx_42 ->
    let x_44 = match xoptx_42 with | Some xsthx_43 -> xsthx_43 | None -> 0 in
    fun y_45 -> x_44 + y_45>.
  
# * * * * * *   # #         * *   val t : (int -> int) code = .<fun x_46 -> x_46>. 
#   * * * *       * *   val t : int code = .<let f_48 x_47 = x_47 in f_48 1>. 
#       - : (unit -> int) code = .<fun () -> 1>. 
#   - : unit -> int = <fun>
#   #   - : (bool -> int) code = .<function | true -> 1 | false -> 0>. 
# * *   #   - : (bool * 'a list -> int) code = .<fun (true, []) -> 1>. 
# * *   Exception: Match_failure ("//toplevel//", 4, 5).
# * *   Error was expected
- : unit = ()
# #   - : (bool array -> int) code = .<fun [|true;false;false|] -> 1>. 
# * *   #   - : ([> `F of int ] -> bool) code = .<function | `F 1 -> true | _ -> false>. 
# * *   # - : ([> `F of int | `G of int ] -> bool) code = .<
function | `F 1|`G 2 -> true | _ -> false>. 
# * * *     - : (int * string -> int) code = .<function | (1, "str") -> 1 | (2, _) -> 2>. 
# * *   # # #   #   # # # #   # - : (t -> int) code = .<
function
| { Stdlib.Complex.re = 1.0 } -> 1
| { Stdlib.Complex.re = 2.0; Stdlib.Complex.im = 2.0 } -> 2
| { Stdlib.Complex.im = _ } -> 3>. 
# * * * * * *       #   #     #         - : (unit -> int) code = .<fun () -> 1>. 
# * *   #       - : ('a -> bool) code = .<fun _ -> true>. 
#   #   - : (int * int -> int) code = .<fun (x_49, y_50) -> x_49 + y_50>. 
# * *   # Line 1, characters 11-24:
1 | .<function (Some x) as y -> x | _ ->  2>.;;
               ^^^^^^^^^^^^^
Warning 26: unused variable y.
- : (int option -> int) code = .<
function | Some x_53 as y_54 -> x_53 | _ -> 2>. 
# * *   Line 4, characters 24-37:
4 | let 1 = (run .<function (Some x) as y -> x | _ ->  2>.) (Some 1);;
                            ^^^^^^^^^^^^^
Warning 26: unused variable y.
# Line 1, characters 24-37:
1 | let 2 = (run .<function (Some x) as y -> x | _ ->  2>.) None;;
                            ^^^^^^^^^^^^^
Warning 26: unused variable y.
# - : (int list -> int) code = .<
function
| x_59::y_60::z_61::[] -> (x_59 - y_60) + z_61
| x_62::y_63::[] -> x_62 - y_63>. 
# * * * * *   #     - : (int list -> int) code = .<
fun (x_69::y_70::[]|x_69::y_70::_::[]) -> x_69 - y_70>. 
# * * *   # # Exception: Match_failure ("//toplevel//", 1, 5).
#   Error was expected
- : unit = ()
#   - : (int list -> int) code = .<
fun (x_77::y_78::[]|x_77::y_78::_::[]|y_78::x_77::_::_::[]) -> x_77 - y_78>. 
# * * *   # # #   - : ([< `E of 'a | `F of 'a | `G of 'a ] -> 'a) code = .<
function | `F x_85|`G x_85 -> x_85 | `E x_86 -> x_86>. 
# * * *   # # Line 1, characters 25-37:
1 | .<function {re=x} -> x | {im=x; re=y} -> x -. y>.;;
                             ^^^^^^^^^^^^
Warning 11: this match case is unused.
- : (t -> float) code = .<
function
| { Stdlib.Complex.re = x_89 } -> x_89
| { Stdlib.Complex.re = y_90; Stdlib.Complex.im = x_91 } -> x_91 -. y_90>. 
# * * * * *   - : (t -> float) code = .<
function
| { Stdlib.Complex.re = x_92; Stdlib.Complex.im = 2.0 } -> x_92
| { Stdlib.Complex.re = y_93; Stdlib.Complex.im = x_94 } -> x_94 -. y_93>. 
# * * * * *     #   # - : (int option -> int option) code = .<
function | Some x_101 as y_102 when x_101 > 0 -> y_102 | _ -> None>. 
# * * *     #   #     - : bool code = .<match 1 with | 1 -> true>. 
# * *   #   - : bool code = .<match (1, 2) with | (1, x_107) -> true | x_108 -> false>. 
# * *   - : int code = .<
match [1; 2] with | x_109::[] -> x_109 | x_110::y_111::[] -> x_110 + y_111>. 
# * * *     #     - : int code = .<
match [1; 2] with
| x_115::[] -> x_115
| x_116::y_117::[]|x_116::y_117::_::[] -> x_116 + y_117>. 
# * * * * *   #   - : int code = .<
match [1; 2; 3; 4] with
| x_121::[] -> x_121
| x_122::y_123::[]|x_122::y_123::_::[]|y_123::x_122::_::_::[] ->
    x_122 - y_123>.

# * * * * *     #   - : ([< `E of 'a | `F of 'a | `G of 'a ] -> 'a) code = .<
fun x_127 ->
  match x_127 with | `F x_128|`G x_128 -> x_128 | `E x_129 -> x_129>.

# * * *     #   # - : (t -> float) code = .<
fun x_133 ->
  match x_133 with
  | { Stdlib.Complex.re = x_134; Stdlib.Complex.im = 2.0 } -> x_134
  | { Stdlib.Complex.re = y_135; Stdlib.Complex.im = x_136 } ->
      x_136 -. y_135>.

# * * * * * *         #     - : bool code = .<
match Stdlib.List.mem 1 [] with
| x_141 -> x_141
| exception Stdlib.Not_found -> false>. 
# * * *               * * * * * * * *       val f : ((int * string) list -> string) code = .<
  fun x_143 ->
    match Stdlib.List.assoc 1 x_143 with
    | "1" as x_144 -> x_144
    | x_145 -> x_145
    | exception Stdlib.Not_found -> ""
    | exception Stdlib.Invalid_argument x_146 -> x_146>.
  
#     - : (int -> bool option) code = .<
fun x_147 ->
  try Some (Stdlib.List.assoc x_147 [(1, true); (2, false)])
  with | Stdlib.Not_found -> None>.

# * * * * *     #   #   #   - : (string -> string) code = .<
fun x_151 ->
  try
    Stdlib.Scanf.sscanf x_151
      (CamlinternalFormatBasics.Format
         ((CamlinternalFormatBasics.Int
             (CamlinternalFormatBasics.Int_d,
               CamlinternalFormatBasics.No_padding,
               CamlinternalFormatBasics.No_precision,
               CamlinternalFormatBasics.End_of_format)), "%d"))
      (fun x_152 -> Stdlib.string_of_int x_152)
  with | Stdlib.Scanf.Scan_failure x_153 -> "fail " ^ x_153>.

# * * * * * *       #   #       - : int code = .<let x_160 = 1 in x_160>. 
# * *     # - : int code = .<let x_162 = 1 in let x_163 = x_162 + 1 in x_163>. 
# * *     # - : int code = .<
let rec f_166 n_167 = if n_167 = 0 then 1 else n_167 * (f_166 (n_167 - 1)) in
f_166 5>. 
# * * *     #       Line 3, characters 6-7:
3 | .<let f = fun x -> x in 
          ^
Warning 26: unused variable f.
- : int code = .<
let f_171 x_170 = x_170 in
let rec f_172 n_173 = if n_173 = 0 then 1 else n_173 * (f_172 (n_173 - 1)) in
f_172 5>. 
# * * * * * * * * *       Line 12, characters 20-21:
12 | let 120 = run .<let f = fun x -> x in 
                         ^
Warning 26: unused variable f.
#     - : int code = .<
let f_179 x_178 = x_178 in
let f_181 n_180 = if n_180 = 0 then 1 else n_180 * (f_179 (n_180 - 1)) in
f_181 5>. 
# * * * *     #       - : (int * int) code = .<
let g_187 x_186 = x_186 + 10 in
let f_188 x_191 = (g_187 x_191) + 20
and g_189 n_190 = if n_190 = 0 then 1 else n_190 * (g_187 (n_190 - 1)) in
((f_188 5), (g_189 5))>. 
#   * * * * * *       #       Line 2, characters 6-7:
2 | .<let g = fun x -> x+10 in
          ^
Warning 26: unused variable g.
- : (int * int) code = .<
let g_199 x_198 = x_198 + 10 in
let rec f_200 x_203 = (g_201 x_203) + 20
and g_201 n_202 = if n_202 = 0 then 1 else n_202 * (g_201 (n_202 - 1)) in
((f_200 5), (g_201 5))>. 
#   * * * * * * * * * *           Line 15, characters 11-12:
15 |  run .<let g = fun x -> x+10 in
                ^
Warning 26: unused variable g.
#   Line 2, characters 10-12:
2 | .<let rec [] = [] in []>.;;
              ^^
Error: Only variables are allowed as left-hand side of `let rec'
# * * * * *   Error was expected
- : unit = ()
#   Line 2, characters 14-15:
2 | .<let rec f = f in f>.;;
                  ^
Error: This kind of expression is not allowed as right-hand side of `let rec'
# * * * * *   Error was expected
- : unit = ()
#       - : (int -> bool) code = .<
fun x_210 ->
  let rec even_211 = function | 0 -> true | x_214 -> odd_212 (x_214 - 1)
  and odd_212 = function | 0 -> false | x_213 -> even_211 (x_213 - 1) in
  even_211 x_210>.

# * * * * * *   # #       - : int code = .<let x_225 = 1
                 and y_226 = 2 in x_225 + y_226>. 
# * *   #   - : int code = .<
let x_229 = 1 in let x_230 = x_229 + 1
                 and y_231 = x_229 + 1 in x_230 + y_231>.

# * * *   # - : (int option -> int) code = .<
fun x_235 -> match x_235 with | Some x_236 -> x_236 + 1>. 
# * * * * * * * * *   # Exception: Match_failure ("//toplevel//", 1, 16).
# * *   Error was expected
- : unit = ()
#         - : int code = .<1>. 
#   - : int code = .<x_242>.

Failure("The code built at Line 2, characters 35-36 is not closed: identifier x_242 bound at Line 2, characters 35-36 is free")
# * * * *   Error was expected
- : unit = ()
#   Exception:
Failure
 "The code built at Line 2, characters 43-44 is not closed: identifier x_243 bound at Line 2, characters 43-44 is free".
# * * * *   Error was expected
- : unit = ()
#   - : ('_weak2 -> '_weak2) code = .<fun y_246 -> x_245>.

Failure("The code built at Line 2, characters 55-69 is not closed: identifier x_245 bound at Line 2, characters 42-43 is free")
# * * * * *   Error was expected
- : unit = ()
#       Exception:
Failure
 "Scope extrusion detected at Line 4, characters 67-75 for code built at Line 4, characters 28-42 for the identifier x_248 bound at Line 4, characters 15-16\nThe problematic code is shown below\n\nfun y_249 -> x_248".
# * * * * *   Error was expected
- : unit = ()
#   * *   - : ('_weak3 -> '_weak3) code = .<fun y_253 -> y_253>. 
# * *         - : ('_weak4 -> '_weak5 -> '_weak5) code = .<
fun x_255 -> fun y_256 -> y_256>. 
# * *   - : ('_weak6 -> '_weak6 -> '_weak6) code = .<
fun x_258 -> fun y_259 -> x_258>. 
# * *     #       * *     * * *         * * * * * * * * *       Line 7, characters 36-42:
7 | let t = .<fun x -> (x+1)[@ppwarning "todo"]>.
                                        ^^^^^^
Warning 22: todo
Line 13, characters 40-47:
13 | let t = .<let f x = x [@@inline] in (f[@inlined]) ()>.
                                             ^^^^^^^
Warning 53: the "inlined" attribute cannot appear in this context

All done

val t : unit code = .<let f_266 x_265 = x_265 in f_266 ()>. 
# 
